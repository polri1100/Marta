import streamlit as st
import pandas as pd 
from login_page import login_form
from home_page import home_content



# --- CONFIGURACI칍N INICIAL DE LA P츼GINA ---
st.set_page_config(layout="wide",
                   page_title='EL TALLER DE MARTA',
                   page_icon='游녴')

# --- L칍GICA DE AUTENTICACI칍N CON ST.LOGIN() Y VERIFICACI칍N DE ACCESO ---

# Obtener la lista de correos autorizados desde secrets.toml
# Aseg칰rate de que el 'emails' en secrets.toml est칠 configurado como una lista de strings
try:
    AUTHORIZED_EMAILS = st.secrets["authorized_users"]["emails"]
except KeyError:
    st.error("Error: La lista de correos autorizados no est치 configurada en secrets.toml.")
    st.stop()


# Verificar si el usuario est치 logueado Y si su correo est치 autorizado
# st.session_state.is_authorized ser치 nuestro propio indicador de autorizaci칩n
if 'is_authorized' not in st.session_state:
    st.session_state.is_authorized = False

if st.user.is_logged_in:
    # Si el usuario est치 logueado con Google, verificamos su email
    if st.user.email in AUTHORIZED_EMAILS:
        st.session_state.is_authorized = True
    else:
        # Si el email no est치 autorizado, cerramos la sesi칩n de Google
        # y marcamos como no autorizado
        st.error(f"Acceso denegado: El correo '{st.user.email}' no est치 autorizado para usar esta aplicaci칩n.")
        st.session_state.is_authorized = False
        st.logout() # Cierra la sesi칩n de Google
        #st.rerun() # Fuerza una recarga para mostrar la pantalla de login de nuevo
else:
    # Si no est치 logueado en absoluto, marcamos como no autorizado
    st.session_state.is_authorized = False


# --- DEFINICI칍N DE LAS P츼GINAS PARA ST.NAVIGATION ---

# La p치gina de login (siempre visible cuando no est치 logueado)
login_page = st.Page(login_form, title="Iniciar Sesi칩n", icon=":material/login:")

# La p치gina de portada (la p치gina por defecto una vez logueado)
# Nota: La funci칩n home_content es lo que se llamar치 al seleccionar esta p치gina
home_page = st.Page(home_content, title="Inicio", icon=":material/home:", default=True)

# La p치gina de logout (un "bot칩n" de navegaci칩n)
def logout_function():
    st.logout()
    st.session_state.logged_in = False # Aseg칰rate de que el estado de login tambi칠n se resetea
    st.rerun() # Para forzar la recarga a la pantalla de login

logout_page = st.Page(logout_function, title="Cerrar Sesi칩n", icon=":material/logout:")

# Define tus p치ginas protegidas (las que est치n en la carpeta 'pages/')
# Aseg칰rate de que los nombres de los archivos en 'pages/' coincidan
articulos_page = st.Page("pages/articulos.py", title="Art칤culos", icon=":material/inventory_2:")
clientes_page = st.Page("pages/clientes.py",title ="Clientes", icon=":material/person_2:" )
buscar_pedidos_page = st.Page("pages/buscar_pedidos.py",title="Buscar Pedidos",icon=":material/search:")
insertar_pedidos_page = st.Page("pages/insertar_pedidos.py",title="Insertar Pedidos",icon=":material/add:")



# --- L칍GICA DE NAVEGACI칍N BASADA EN EL ESTADO DE LOGIN ---

if st.user.is_logged_in:
    # Si est치 logueado, muestra el men칰 completo de navegaci칩n
    pg = st.navigation(
        {
            "Principal": [home_page], # Puedes agrupar la Portada en una secci칩n
            "Gesti칩n": [articulos_page,clientes_page,buscar_pedidos_page,insertar_pedidos_page], # Aqu칤 ir칤an tus otras p치ginas protegidas
            "Cuenta": [logout_page], # La opci칩n de cerrar sesi칩n
        }
    )
else:
    # Si NO est치 logueado, solo muestra la p치gina de login
    pg = st.navigation([login_page])

# Ejecuta la navegaci칩n
pg.run()
